{"version":3,"sources":["CellGrid.js","ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["CellGrid","style","this","props","grid","colors","map","row","cell","backgroundColor","r","g","b","React","Component","ColorPicker","onChange","state","color","createMuiTheme","overrides","MuiSlider","thumb","boxShadow","fade","track","rail","title","value","display","flexFlow","ThemeProvider","theme","makeSliderTheme","verticalAlign","width","Typography","flex","paddingLeft","paddingRight","Slider","step","max","valueLabelDisplay","e","n","Input","margin","target","inputProps","min","type","toString","slice","toUpperCase","ExpansionPanel","ExpansionPanelSummary","expandIcon","MuiAvatar","colorDefault","Grid","container","spacing","justify","alignItems","item","Avatar","minWidth","rgbToHex","ExpansionPanelDetails","makeSlider","setState","App","settings","size","rows","cols","color_picker","fill_range","start","x","y","end","Array","fill","rules","height","textAlign","flexGrow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00d2dcbd.chunk.js","sourcesContent":["import React from \"react\";\n\nclass CellGrid extends React.Component {\n  render() {\n    return (\n      <table style={this.props.style}>\n        {this.props.grid.colors.map((row) => (\n          <tr>\n            {row.map((cell) => (\n              <td\n                style={{\n                  backgroundColor:\n                    \"rgb(\" + cell.r + \",\" + cell.g + \",\" + cell.b + \")\",\n                }}\n              >\n                {/* {cell.r},{cell.g},{cell.b} */}\n              </td>\n            ))}\n          </tr>\n        ))}\n      </table>\n    );\n  }\n}\n\nexport default CellGrid;\n","import React from \"react\";\nimport {\n  Slider,\n  Avatar,\n  Typography,\n  Input,\n  Grid,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails,\n} from \"@material-ui/core\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nclass ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = {\n      onChange: props.onChange,\n    };\n    this.state = {\n      r: props.color.r,\n      g: props.color.g,\n      b: props.color.b,\n    };\n  }\n\n  makeSliderTheme(color) {\n    return createMuiTheme({\n      overrides: {\n        MuiSlider: {\n          thumb: {\n            color: color,\n            \"&$focusVisible,&:hover\": {\n              boxShadow: `0px 0px 0px 8px ${fade(color, 0.16)}`,\n              \"@media (hover: none)\": {\n                boxShadow: \"none\",\n              },\n            },\n            \"&$active\": {\n              boxShadow: `0px 0px 0px 14px ${fade(color, 0.16)}`,\n            },\n          },\n          track: {\n            color: color,\n          },\n          rail: {\n            color: color,\n          },\n        },\n      },\n    });\n  }\n\n  makeSlider(title, value, color, onChange) {\n    return (\n      <div style={{ display: \"flex\", flexFlow: \"row\" }}>\n        <ThemeProvider theme={this.makeSliderTheme(color)}>\n          <span\n            style={{\n              // flex: \"4 1 auto\",\n              verticalAlign: \"baseline\",\n              width: \"32pt\",\n            }}\n          >\n            <Typography>{title}</Typography>\n          </span>\n          <span\n            style={{\n              verticalAlign: \"baseline\",\n              flex: \"1 1 auto\",\n              paddingLeft: \"16pt\",\n              paddingRight: \"16pt\",\n            }}\n          >\n            <Slider\n              step={1}\n              value={value}\n              max={255}\n              valueLabelDisplay=\"auto\"\n              onChange={(e, n) => {\n                onChange(n);\n              }}\n            />\n          </span>\n          <Input\n            style={{\n              verticalAlign: \"baseline\",\n              width: \"36pt\",\n            }}\n            value={value}\n            margin=\"dense\"\n            onChange={(e) => {\n              onChange(e.target.value);\n            }}\n            inputProps={{\n              step: 1,\n              min: 0,\n              max: 255,\n              type: \"number\",\n            }}\n          />\n        </ThemeProvider>\n      </div>\n    );\n  }\n\n  rgbToHex(r, g, b) {\n    return (\n      \"#\" +\n      ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase()\n    );\n  }\n\n  render() {\n    return (\n\n        <ExpansionPanel>\n          <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n            <ThemeProvider\n              theme={createMuiTheme({\n                overrides: {\n                  MuiAvatar: {\n                    colorDefault: {\n                      backgroundColor:\n                        \"rgb(\" +\n                        this.state.r +\n                        \",\" +\n                        this.state.g +\n                        \",\" +\n                        this.state.b +\n                        \")\",\n                    },\n                  },\n                },\n              })}\n            >\n              <Grid\n                container\n                spacing={2}\n                justify=\"flex-start\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <Avatar\n                    style={{\n                      margin: \"4pt\",\n                    }}\n                  >\n                    <div />\n                  </Avatar>\n                </Grid>\n                <Grid item>\n                  <Typography style={{ minWidth: \"5em\" }}>\n                    {this.rgbToHex(this.state.r, this.state.g, this.state.b)}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </ThemeProvider>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <div style={{ width: \"100%\", margin: \"0pt 4pt 4pt 4pt\" }}>\n              <div>\n                {this.makeSlider(\n                  \"Red\",\n                  this.state.r,\n                  \"rgb(\" + this.state.r + \",0,0)\",\n                  (n) => {\n                    this.setState({ r: n });\n                    this.props.onChange(n, this.state.g, this.state.b);\n                  }\n                )}\n              </div>\n              <div>\n                {this.makeSlider(\n                  \"Green\",\n                  this.state.g,\n                  \"rgb(0,\" + this.state.g + \",0)\",\n                  (n) => {\n                    this.setState({ g: n });\n                    this.props.onChange(this.state.r, n, this.state.b);\n                  }\n                )}\n              </div>\n              <div>\n                {this.makeSlider(\n                  \"Blue\",\n                  this.state.b,\n                  \"rgb(0,0,\" + this.state.b + \")\",\n                  (n) => {\n                    this.setState({ b: n });\n                    this.props.onChange(this.state.r, this.state.g, n);\n                  }\n                )}\n              </div>\n            </div>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n  }\n}\n\nexport default ColorPicker;\n","import React from \"react\";\nimport \"./App.css\";\nimport CellGrid from \"./CellGrid\";\nimport ColorPicker from \"./ColorPicker\";\n// import { createMuiTheme } from \"@material-ui/core/styles\";\n// import { ThemeProvider } from \"@material-ui/styles\";\n\nconst initRows = 24,\n  initCols = 32;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      settings: {\n        size: {\n          rows: initRows,\n          cols: initCols,\n        },\n        color_picker: {\n          r: 0,\n          g: 0,\n          b: 0,\n        },\n        fill_range: {\n          start: { x: 0, y: 0 },\n          end: { x: initRows, y: initCols },\n        },\n      },\n      grid: {\n        colors: Array(initRows).fill(\n          Array(initCols).fill({ r: 0, g: 0, b: 0 })\n        ),\n      },\n      rules: [],\n    };\n  }\n  render() {\n    return (\n      <div style={{ height: \"100vh\", display: \"flex\", flexFlow: \"row\" }}>\n        <span style={{ height: \"100vh\", flex: \"8 8 auto\" }}>\n          <div style={{ display: \"flex\", flexFlow: \"column\", height: \"100%\" }}>\n            <div style={{ flex: \"0 1 auto\" }}></div>\n            <div style={{ flex: \"1 1 auto\" }}>\n              <CellGrid\n                grid={this.state.grid}\n                style={{\n                  height: \"100%\",\n                  width: \"100%\",\n                  textAlign: \"center\",\n                  verticalAlign: \"middle\",\n                  flexGrow: 1,\n                }}\n              />\n            </div>\n          </div>\n        </span>\n        <span style={{ flex: \"2 2 auto\" }}>\n          <ColorPicker\n            color={this.state.settings.color_picker}\n            onChange={(r, g, b) =>\n              this.setState({ color_picker: { r: r, g: g, b: b } })\n            }\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ThemeProvider } from \"@material-ui/styles\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}